--------------------------------------
NIO三大核心：Channel、Buffer、Selector
--------------------------------------

传统IO：基于字节流和字符流进行操作。

传统IO是面向流的，每次从流中读一个或多个字节直至读取所有字节，它们没有被缓存在任何地方。此外，
它不能前后移动流中的数据。如果需要前后移动从流中读取的数据，需要先将它缓存到一个缓冲区。

传统IO的各种流是阻塞的，这意味着线程调用read()或write()时，该线程不能再做任何事情。

--------------

NIO：基于Channel和Buffer进行操作。

数据总从Channel读取到Buffer中，或从Buffer写入到Channel中。Selector用于监听多个Channel的事件
（如：连接打开、数据到达），因此单个线程可以监听多个Channel。与传统IO的区别在于，NIO是面向缓冲
区的，数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区中前后移动。这增加了处理过程中的灵活性，
但是需要检查缓冲区中是否包含所要处理的数据，而且还要确保当更多数据读入缓冲区时不要覆盖缓冲区里
尚未处理的数据。

NIO是非阻塞模式的，在数据变得可以读取或完全写入之前，这个线程同时可以去做别的事情。线程通常将非
阻塞IO的空闲时间用于在其它Channel上执行IO操作，所以一个单独的线程可以管理多个输入输出Channel。

--------------

Channel

Channel与传统IO中的Stream是差不多一个等级的。只不过Stream是单向的，譬如InputStream、OutputStream
而Channel是双向的，既可以用来进行读操作，又可以用来进行写操作。NIO中Channel的实现有：
 - FileChannel
 - DatagramChannel
 - SocketChannel
 - ServerSocketChannel
分别可以对应文件IO、UDP和TCP（Server和Client）

--------------

Buffer

NIO中的关键Buffer实现有：ByteBuffer,CharBuffer,DoubleBuffer,FloatBuffer,IntBuffer,LongBuffer,
ShortBuffer。分别对应基本数据类型：byte,char,double,float,int,long,short。当然NIO中还有
MappedByteBuffer,HeapByteBuffer,DirectByteBuffer等

--------------

Selector

Selector运行单线程处理多个Channel，如果应用打开了多个通道，但每个连接的流量都很低，使用Selector
就会很方便。要使用Selector，得向Selector注册Channel，然后调用它的select()方法。这个方法会一直
阻塞到某个注册的Channel有事件就绪，一旦这个方法返回，线程就可以处理这些事件，比如：有新连接进来
或数据接收等。

--------------

FileChannel的获取
 - new RandomAccessFile("nio.txt", "rw").getChannel();
 - new FileInputStream("nio.txt").getChannel();

Buffer的使用
 - 第一步：给Buffer分配空间
   ByteBuffer buffer = ByteBuffer.allocate(1024);
 - 第二步：写入数据到Buffer
   - Channel写到Buffer：fileChannel.read(buffer);
   - Buffer的put()方法：buffer.put(...);
 - 第三步：调用flip()方法
   buffer.flip();
 - 第四步：从Buffer中读取数据
   - Buffer读取到Channel：channel.write(buffer);
   - Buffer的get()方法：buffer.get();
 - 第五步：调用compact()方法 
   buffer.compact();

--------------

关于Buffer

Buffer缓冲区实际上是一个容器，一个连续数组。Channel提供从文件/网络读取数据的渠道，但是读写的数
据都必须经过Buffer：Client-->Buffer-->Channel(Client)-->Channel(Server)-->Buffer-->Server
可以把Buffer简单理解为一组基本数据类型的元素列表，它通过几个变量来保存这个数据的当前位置状态：
 - capacity缓冲区数据组的总长度
 - position下一个要操作的数据元素的位置
 - limit缓冲区数据组中不可操作的下一个元素的位置limit<=capacity
 - mark用于记录当前position的前一个位置或默认是0

例：
 - ByteBuffer.allocate(11)创建一个数组缓冲区：
   position=0，limit和capacity默认是数组长度
 - 当写入5个字节的数据时：
   position=5，limit和capacity不变
 - 调用ByteBuffer.flip()方法：
   position=0, limit=5，capacity不变
 - 此时底层操作系统就可以从缓冲区中正确读取这5个字节的数据并发送出去
 - 调用ByteBuffer.clear()方法：
   position=0, limit设置成capacity，Buffer被清空，事实上Buffer数据并未被清除。
 - 如果Buffer中有一些未读的数据，调用clear()方法，数据将“被遗忘”，无从得知哪些数据是否被读过
 - 如果Buffer中仍有一些未读数据，且后续还需要这些数据，但此时要先写些数据，可以调用compact()方
   法compact()方法将所有未读的数据拷贝到Buffer起始处，然后将position设到最后一个未读元素正后面，
   limit属性依然像clear()方法一样，设置成capacity，现在Buffer准备好写数据了，但不会覆盖未读数据
 - 调用Buffer.mark()方法，可以标记Buffer中的一个特定position，之后可以通过Buffer.reset()方法恢
   复到这个position。
 - Buffer.rewind()方法将position设回0，所以可以重读Buffer中的所有数据。limit保持不变，仍然表示
   能从Buffer中读取多少个元素。

--------------

SocketChannel


