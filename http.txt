1. HTTP一般使用TCP协议建立连接，但不排除一些基于其他协议或其他网络的HTTP协议的实现方式，HTTP只是假定传输是可靠的，因而任何能够提供这种保证的协议都可以被使用。

2. HTTP1.0中，当连接建立后，浏览器发送一个请求，服务器回应一个消息，之后，连接就被关闭。当浏览器下次请求的时候，需要重新建立连接，开销较大。

3. HTTP1.1中，给出了一个持续连接的机制，并将其作为HTTP1.1中建立连接的缺省行为，通过这种连接，浏览器可以在建立一个连接之后，发送请求并得到回应，然后继续发送请求并再次得到回应。而客户端还可以发送流水线请求，也就是说，客户端可以持续发送多个请求，而不用等待每一个响应的到来。

4. URI（Uniform Resource Identifier，统一资源标识符）纯粹是一个符号结构，用于指定构成Web资源的字符串的各个不同部分。
   URL是一种特殊类型的URI，它包含了用于查找某个资源的足够信息。其它的URI，例如：mailto:zhangsan@sina.com则不属于URL，因为它里面不存在根据该标识符来查找的任何数据。这种URI称为URN（通用资源名）

5. 客户端通过发送HTTP请求向服务器请求对资源的访问。

6. HTTP请求由三部分组成，分别是：请求行，消息报头，请求正文
---HTTP请求--请求行
   请求行以一个方法符号开头，后面跟着请求URI和协议的版本，以回车换行（CRLF）作为结尾。请求行以空格分隔，除了作为结尾的CRLF外，不允许出现单独的CR或LF字符。格式如下：
   Method Request-URI HTTP-Version CRLF
   Method表示请求的方法，Request-URI是一个统一资源标识符，标识了要请求的资源，HTTP-Version表示要请求的HTTP协议版本，CRLF表示回车换行。例如：GET /form.html HTTP/1.1 (CRLF)
---HTTP请求--方法
   GET     请求获取由Request-URI所标识的资源
   POST    在Request-URI所标识的资源后附加新的数据
   HEAD    请求获取由Request-URI所标识的资源的响应消息报头
   PUT     请求服务器存储一个资源，并用Request-URI作为其标识
   DELETE  请求服务器删除由Request-URI所标识的资源
   TRACE   请求服务器回送收到的请求信息，主要用于测试或诊断
   CONNECT 保留将来使用
   OPTIONS 请求查询服务器的性能，或者查询与资源相关的选项和需求

7. HTTP响应。在接收和解释请求消息后，服务器会返回一个HTTP响应消息。与HTTP请求类似，HTTP请求由三部分组成，分别是：状态行，消息报头，响应正文。
---HTTP响应--状态行
   状态行由协议版本、数字形式的状态代码、及相应的状态描述组成，各元素这间以空格分隔，除了结尾的CRLF（回车换行）序列外，不允许出现CR或LF字符。格式如下：
   HTTP-Version Status-Code Reason-Phrase CRLF
   HTTP-Version表示服务器HTTP协议的版本，Status-Code表示服务器发回的响应代码，Reason-Phrase表示状态代码的文本描述，CRLF表示回车换行。例如：HTTP/1.1 200 OK (CRLF)
---HTTP响应--状态代码与状态描述
   状态代码由3位数字组成，表示请求是否被理解或被满足，状态描述给出了关于状态代码的简短的文本描述。
   状态代码的第一数字定义了响应的类别，后面两位数字没有具体的分类。第一个数字有五种可能的取值：
   1xx：指示信息--表示请求已接收，继续处理。
   2xx：成功--表示请求已经被成功接收、理解、接受。
   3xx：重定向--要完成请求必须进行更进一步的操作。
   4xx：客户端错误--请求有语法错误或请求无法实现。
   5xx：服务器端错误--服务器未能实现合法的请求。

   200 OK
   客户端请求成功
   400 Bad Request
   由于客户端语求有语法错误，不能被服务器所理解
   401 Unauthorized
   请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用
   403 Forbidden
   服务器收到请求，但是拒绝提供服务。服务器通常会在响应正文中给出不提供服务的原因
   404 Not Found
   请求的资源不存在，例如，输入了错误的URL
   500 Internal Server Error
   服务器发生不可预期的错误，导致无法完成客户端请求
   503 Service Unavailable
   服务器当前不能够处理客户端的请求，在一段时间后服务器可能会恢复正常。

8. HTTP消息由客户端到服务器的请求和服务器到客户端的响应组成。请求消息和响应消息都是由开始行，消息报头（可选的），空行（只有CRLF的行），消息正文（可选的）组成。对于请求消息，开始行就是请求行，对于响应消息，开始行就是状态行。

9. 消息报头
   HTTP消息报头包括普通报头、请求报头、响应报头、实体报头。每一个报头域都是由
   名字:(空格)值
   组成，消息报头域的名字是大小写无关的。

---普通报头
   在普通报头中，有少数报头域应用于所有的请求和响应消息，但并不用于被传输的实体，这些报头域只用于传输的消息
常用的普通报头：
 --Cache-Control
   response.setHeader("Cache-Control","no-cache");
   这句代码将在发送的响应消息中设置普通报头域：Cache-Control: no-cache
 --Date
   Date普通报头域表示消息产生的日期和时间，可以用于HTTP响应中，也可以用于HTTP请求中。作为服务器端，应该总是在所有的响应中包含Date报头域。作为客户端只有在发送的消息中包含了消息正文的时候，才应该发送Date报头域。例如，在POST请求的时候。
 --Connection
   Connection普通报头域允许发送者指定连接的选项，例如指定连接是持续的。或者指定“close”选项，通知服务器，在响应完成后，关闭连接
 --Pragma
   被用于包含特定实现（implementation-specific）的指令，这些指令可能会应用到请求/响应链中的任何一个接收者。最常用的是Pragma: no-cache。在HTTP1.1中，它的含义和Cache-Control: no-cache相同。有时候，我们不知道客户端浏览器是否支持HTTP1.1，可以同时使用Pragma和Cache-Control报头域。来指示客户端不要缓存响应消息。

---请求报头
   请求报头允许客户端向服务器端传递该请求的附加信息以及客户端自身的信息。
常用的请求报头
 --Accept
   Accept请求报头域用于指定客户端接受哪些类型的信息。例如：Accept: image/gif，表明客户端希望接受GIF图像格式的资源，Accept: text/html，表明客户端希望接受html文本。
 --Accept-Charset
   Accept-Charset请求报头域用于指定客户端接受的字符集，例如：Accept-Charset: iso-8859-1, gb2312。如果在请求消息中没有设置这个域，缺省的任何字符集都可以接受。
 --Accept-Encoding
   Accept-Encoding请求报头域类似于Accept，但是它用于指定可接受的内容编码，例如：Accept-Encoding: gzip, deflate。如果请求消息中没有设置这个域，服务器假定客户端对各种内容编码都可接受。
 --Accept-Language
   Accept-Language请求报头域类似于Accept，但是它是用于指定一种自然语言，例如：Accept-Language: zh-cn。如果请求消息中没有设置这个域，服务器假定客户端对各种语言都可接受。
 --Authorization
   Authorization请求报头域主要用于证明客户端有权查看某个资源，当浏览器访问一个页面时，如果收到服务器的响应代码为401(未授权)，可以发送一个包含Authorization请求报头域的请求，要求服务器对其进行验证。
 --Host
   Host请求报头域主要用于指定被请求资源的Internet主机和端口号，它通常是从HTTP URL中提取出来的。要注意的是，在发送HTTP请求的时候，这个报头域是必需的。
 --User-Agent
   我们上网登录论坛的时候，往往会看到一些欢迎信息，其中列出了你的操作系统的名称和版本，你所用的浏览器的名称和版本，实际上，服务器应用程序就是从User-Agent这个请求报头域中获取到的这些信息。User-Agent请求报头域允许客户端将它的操作系统、浏览器和其它属性告诉服务器。不过，这个报送域不是必需的。如果我们自己编写一个浏览器，不使用User-Agent请求报头域，那么服务器端就无法得知我们的信息了。

---响应报头
   响应报头允许服务器传递不能放在状态行中的附加响应信息，以及关于服务器的信息和对Request-URI所标识的资源进行下一步访问的信息。
常用的响应报头域
 --Location
   Location响应报头域用于重定向接受者到一个新的位置。例如：客户端所请求的页面已不在原先的位置，为了让客户端重定向到这个页面新的位置，服务器可以发回Location响应报头域。这种情况还经常发生在更换域名的时候，在旧的域名所对应的服务器上保留一个文件，然后使用重定向语句，让客户端去访问新的域名所对应的服务器上的资源。
   例如：Location: http://www.kmust.edu.cn
 --Server
   Server响应报头域包含了服务器用来处理请求的软件信息。它和User-Agent请求的报头域是相对应的。前者发送服务器端软件的信息，后者发送客户端软件和操作系统的信息。
   例如：Server: Apache-Coyote/1.1
 --WWW-Authenticate
   WWW-Authenticate响应报头域必须被包含在401(未授权)响应消息中，这个报头域和前面讲到的Authorization请求报头域是相关的，当客户端收到401响应消息，就要决定是否请求服务器对其进行验证。如果要求服务器对其进行验证，就可以发送一个包含了Authorization报头域的请求。
   例如：WWW-Authenticate: Basic realm="Basic Auth Test!"
   从这个响应报头域，可以知道服务器端对我们所请求的资源采用的是基本验证机制。

---实体报头
   请求和响应消息都可以传送一个实体，一个实体由实体报头域和实体正文组成，在大多数情况下，实体正文就是请求消息中的请求正文或者响应消息中的响应正文。但是在发送时，并不是说实体报头域和实体正文要在一起发送。例如：有些响应可以只包含实体报头域。实体就好像我们写的书信，在信中，我们可以写上标题，加上页号等，这部分就相当于实体报头域。而我们所写的书信内容，就相当于是实体正文。前面所讲的普通报头、请求报头、响应报头我们可以看成是写在信封上的邮编、接收者、发送者等内容。实体报头定义了关于实体正文（例如：有无实体正文）和请求所标识的资源的元信息。
 --Content-Encoding
   Content-Encoding实体报头域被用作媒体类型的修饰符，它的值指示了已经被应用到实体正文的附加内容编码，因而要获得Content-Type报头域中所引用的媒体类型，必须采用相应的解码机制。Content-Encoding主要用于记录文档的压缩方法，下面是一个例子：
   Content-Encoding: gzip
   如果一个实体正文采用了编码方式存储，在使用之前就必须进行解码。
 --Content-Language
   Content-Language实体报头域描述了资源使用的自然语言。Content-Language允许用户遵照自身的首选语言来识别和区分实体。如果这个实体内容仅仅打算提供给丹麦的阅读者，那么可以按照如下的方式设置这个实体报头域：
   Content-Language: da
   如果没有指定Content-Language报头域，那么实体内容将提供给所有语言的阅读者。
 --Content-Length
   Content-Length实体报头域用于指明实体正文的长度，以字节方式存储的十进制数字来表示，也就是一个数字字符占一个字节，用其对应的ASCII码存储传输。要注意的是，这个长度仅仅是表示实体正文的长度，没有包括实体报头的长度。
 --Content-Type
   Content-Type实体报头域用于指明发送给接收者的实体正文的媒体类型。例如：
   Content-Type: text/html;charset=ISO-8859-1
   Content-Type: text/html;charset=GB2312
 --Last-Modified
   Last-MOdified实体报头域用于指示资源最后修改日期及时间
 --Expires
   Expires实体报头域给出响应过期的日期和时间。通常，代理服务器或浏览器会缓存一些页面。当用户再次访问这些页面时，直接从缓存中加载并显示给用户，这样缩短了响应的时间，减少了服务器的负载。为了让代理服务器或浏览器在一段时间后更新页面，我们可以使用Expires实体报头域指定页面过期的时间。当用户又一次访问页面时，如果Expires报头域给出的日期和时间比Date普通报送域给出的日期和时间要早（或相同），那么代理服务器或浏览器就不会再使用缓存的页面，而是从服务器上请求更新的页面。不过要注意，即使页面过期了，也并不意味着服务器上的原始资源在此时间之前或之后发生了改充。Expires实体报头域使用的日期和时间必须是RFC 1123中的日期格式，例如：
   Expires: Thu, 15 Sep 2005 16:00:00 GMT
   HTTP1.1的客户端和缓存必须将其它非法的日期格式（也包括0）看作已经过期。例如，为了让浏览器不要缓存页面，我们也可以使用Expires实体报头域，设置它的值为0，如下：
   response.setDateHeader("Expires","0");
