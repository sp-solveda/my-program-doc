git config --global user.name "yang.dongdong"
git config --global user.email "dongdong@yang.com"
git init
git add readme.txt
git commit -m "wrote a readme file"
git status
git diff readme.txt
git log
git log --pretty=oneline
git reset --hard HEAD^
git reset --hard <commit id>
git reset HEAD readme.txt
git diff HEAD -- readme.txt
git checkout -- test.txt
git rm test.txt
ssh-keygen -t rsa -C "youremail@example.com"
git remote add origin https://yddgit@github.com/yddgit/learngit.git
git remote add origin git@github.com:yddgit/learngit.git
git remote set-url origin https://yddgit@github.com/yddgit/learngit.git
git remote set-url origin git@github.com:yddgit/learngit.git
git push -u origin master
git push origin master
git clone https://github.com/yddgit/learngit.git
git clone git@github.com:yddgit/learngit.git
git checkout -b dev
git branch dev
git checkout dev
git branch
git checkout master
git merge dev
git log --graph --pretty=oneline --abbrev-commit
git merge --no-ff -m "merge with no-ff" dev
git stash
git stash list
git stash pop
git stash apply stash@{0}
git branch -d feature-vulcan
git branch -D feature-vulcan
git remote
git remote -v
git push origin master
git push origin dev
git pull
git branch --set-upstream dev origin/dev
git tag v1.0
git tag
git tag v0.9 06b4beb
git show <tagname>
git tag -a v0.1 -m "version 0.1 released" fc52dce
git tag -s v0.2 -m "signed version 0.2 released" 39a6f70
git tag -d v0.1
git push origin v1.0
git push origin --tags
git tag -d v0.9
git push origin :refs/tags/v0.9
git config --global color.ui true
git config --global alias.st status
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.br branch
git config --global alias.unstage 'reset HEAD'
git config --global alias.lg 'log --graph --pretty=oneline --abbrev-commit'
git config --global alias.last 'log -1'
git init --bare sample.git
git clone git@hostname:/srv/sample.git

-------------------------------------------------

使用ssh连接git仓库时，可能针对不同的仓库需要使用不同的密钥，此时需要做如下配置：
 - 在~/.ssh/目录下创建配置文件config，内容如下
   Host <host-a>
     HostName <hostname/ip_addr>
     HostkeyAlgorithms +ssh-dss
     User <ssh_user_name>
     Port <port>
     IdentityFile </path/to/git_id_rsa1>
   Host <host-b>
     HostName <hostname/ip_addr>
     HostkeyAlgorithms +ssh-dss
     User <ssh_user_name>
     Port <port>
     IdentityFile </path/to/git_id_rsa2>
 - 在shell中键入如下命令进入ssh-agent
   ssh-agent bash --login -i
 - 使用如下命令添加加密的密钥，命令行会提示输入Enter pass phrase，输入对应的密钥密码即可
   ssh-add /path/to/git_id_rsa1
   ssh-add /path/to/git_id_rsa2
 - 至此，在当前shell中即可使用git命令进行pull和push，无须验证

-------------------------------------------------

SourceTree使用ssh方式克隆Git仓库里，有时会无反应，或提示：

  git -c diff.mnemonicprefix=false -c core.quotepath=false fetch origin
  The server's host key is not cached in the registry. You have no guarantee that the server is the computer you think it is.
  The server's rsa2 key fingerprint is:
  ssh-rsa 2048 9f:a7:a4:00:e4:f1:7a:bc:aa:c1:d3:ea:1e:d7:4d:79
  If you trust this host, enter "y" to add the key to PuTTY's cache and carry on connecting.
  If you want to carry on connecting just once, without adding the key to the cache, enter "n".
  If you do not trust this host, press Return to abandon the connection.

此问题多出现在SourceTree 1.8以上，可通过如下方式将远程主机添加到known_hosts里，即可正常连接：

在命令行下找到SourceTree安装目录里的PuTTy工具，例如
  "C:\Program Files (x86)\Atlassian\SourceTree\tools\putty\plink.exe"（注意路径包含空格时要加引号）
然后运行命令
  plink.exe root@192.168.1.2 -P port（根据自己的Git仓库URL自行更改），遇到确认服务器公钥时，输入"y"即可。

以上问题还有另外的解决办法，就是修改SourceTree使用其内嵌的Git，不要使用系统安装的Git，参见：
https://confluence.atlassian.com/sourcetreekb/trust-a-server-s-host-key-when-no-button-is-available-to-trust-it-788731545.html

  工具 > 选项 > Git > 使用内嵌的Git

-------------------------------------------------

1.Git是一种分布式的文件管理器

首先，分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库

多人协作：你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之
间只需把各自的修改推送给对方，就可以互相看到对方的修改了

在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，分
布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来
方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已

-------------------------------------------------

2.Git的安装

Debian或Ubuntu: sudo apt-get install git
其他Linux发行版: ./configure --> make --> make install
Windows: http://msysgit.github.io/

安装完成之后的设置
git config --global user.name "yang.dongdong"
git config --global user.email "dongdong@yang.com"

注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会
使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址

-------------------------------------------------

3.创建版本库

--选择或创建目录

--创建Git仓库
git init
Initialized empty Git repository in /directory/you/create/.git/

--告诉Git把文件添加到仓库
git add readme.txt
注意：Unix的哲学是“没有消息就是好消息”

--告诉Git把文件提交到仓库
git commit -m "wrote a file"
[master (root-commit) 109016a] wrote a readme file
 1 files changed, 2 insertions(+), 0 deletions(-)
 create mode 100644 readme.txt

git commit命令执行成功后告诉你: 1个文件被改动, 插入了2行内容
Git添加文件需要add, commit两步是因为commit可以一次提交很多文件, 多次add, 一次commit

-------------------------------------------------

4. 仓库管理基本操作

--git status命令可以让我们时刻掌握仓库当前的状态, 如下提示readme.txt被修改过
git status
# On branch master
# Changed but not updated:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#       modified:   readme.txt
#
no changes added to commit (use "git add" and/or "git commit -a")

--git diff查看文件内容修改详情, 如下使用Unix通用的diff格式
git diff readme.txt
diff --git a/readme.txt b/readme.txt
index 46d49bf..9247db6 100644
--- a/readme.txt
+++ b/readme.txt
@@ -1,2 +1,2 @@
-Git is a version control system.
+Git is a distributed version control system.
 Git is free software.

--提交修改和提交新文件是一样的, 使用git add命令
git add readme.txt

--修改过的文件被add后, 查看状态如下
git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#       modified:   readme.txt
#

git status告诉我们将要提交的修改包括readme.txt

--确认提交修改
git commit -m "add distributed"
[master 4d2f303] add distributed
 1 files changed, 1 insertions(+), 1 deletions(-)

--提交后再查看仓库状态
git status
# On branch master
nothing to commit (working directory clean)

git告诉我们当前没有需要提交的修改, 而且, 工作目录是clean的

-------------------------------------------------

5.版本回退

--Git查看历史记录, 若输入信息太多可以加上--pretty=oneline参数
commit后的一串数字是commit id(版本号)

git log
commit fc52dce30d658c7904008e4abb67b35a58c0c2e7
Author: yang.dongdong <642444906@qq.com>
Date:   Sat Mar 21 21:43:32 2015 +0800

    append GPL

commit 4d2f303fc93c53e9b197df652db6553fdf6b6621
Author: yang.dongdong <642444906@qq.com>
Date:   Sat Mar 21 21:39:31 2015 +0800

    add distributed

commit 109016a243559432266e82b51638979f46339855
Author: yang.dongdong <642444906@qq.com>
Date:   Sat Mar 21 21:08:19 2015 +0800

    wrote a readme file

git log --pretty=oneline
fc52dce30d658c7904008e4abb67b35a58c0c2e7 append GPL
4d2f303fc93c53e9b197df652db6553fdf6b6621 add distributed
109016a243559432266e82b51638979f46339855 wrote a readme file

--Git中
HEAD表示当前版本
HEAD^表示上个版本
HEAD^^表示上上个版本
HEAD~100表示往上100个版本

--使用reset命令回退版本
git reset --hard HEAD^
HEAD is now at 4d2f303 add distributed

--后悔了, 想恢复, 只能用git reset --hard <commit id>

第一步查找commit id
git reflog
4d2f303 HEAD@{0}: HEAD^: updating HEAD
fc52dce HEAD@{1}: commit: append GPL
4d2f303 HEAD@{2}: commit: add distributed
109016a HEAD@{3}: commit (initial): wrote a readme file

第二步回复版本
git reset --hard fc52dce
HEAD is now at fc52dce append GPL

-------------------------------------------------

6.工作区和暂存区

工作区有一个隐藏目录.git, 这个不算工作区, 而是Git的版本库

Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区
还有Git为我们自动创建的第一个分支master, 以及指向master的一个指针叫HEAD

把文件往Git版本库里添加的时候, 是分两步执行的:
第一步是用git add把文件添加进去, 实际上就是把文件修改添加到暂存区
第二步是用git commit提交更改, 实际上就是把暂存区的所有内容提交到当前分支

工作区--add-->STAGE(暂存区)--commit-->master(分支)

-------------------------------------------------

7.管理修改

Git跟踪并管理的是修改而非文件, 对多次修改, add过的才会被提交, 没add的修改在提交时
会被忽略

git diff HEAD -- readme.txt 查看当前文件与版本库中最新文件的区别

-------------------------------------------------

8.撤销修改

git checkout -- <file>...
让这个文件回到最近一次git commit或git add时的状态

git reset HEAD <file>...
把暂存区的修改撤销掉(unstage), 重新放回工作区

-------------------------------------------------

9.删除文件

确认删除: git add/rm <file>...
取消删除: git checkout -- <file>...

-------------------------------------------------

10.远程仓库

注册GitHub账号: https://github.com/
在本地创建SSH-Key: ssh-keygen -t rsa -C "youremail@example.com"
将本地.ssh/id_rsa_pub文件中的内容添加到GitHub账号的SSH-Key列表中

-------------------------------------------------

11.添加远程库

创建一个远程仓库
为本地仓库关联一个远程仓库地址: 
git remote add origin https://yddgit@github.com/yddgit/learngit.git
git remote add origin git@github.com:yddgit/learngit.git
修改这个远程仓库地址:
git remote set-url origin https://yddgit@github.com/yddgit/learngit.git
git remote set-url origin git@github.com:yddgit/learngit.git
初次上传本地文件到远程仓库:
git push -u origin master
后续从本地提交:
git push origin master

-------------------------------------------------

12.从远程库克隆

git clone https://github.com/yddgit/learngit.git
git clone git@github.com:yddgit/learngit.git

-------------------------------------------------

13.分支管理

分支在实际中有什么用呢，假设你准备开发一个新功能，但是需要两周才能
完成，第一周你写了一半的代码，如果立刻提交，由于代码还没写完，不完
整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存
在丢失每天进度的巨大风险。

现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，
还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，
直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响
别人工作。

-------------------------------------------------

14.创建与合并分支

创建分支
git checkout -b dev
上条命令相当于以下两条命令, 表示创建并切换分支
git branch dev
git checkout dev

查看当前分支, 当前分支前面会标一个*号
git branch

在dev分支上修改
git add readme.txt
git commit -m "branch test"

切回master分支
git checkout master

把dev分支的工作成果合并到master分支上, merge命令用于合并指定分支到当前分支
git merge dev

删除dev分支
git branch -d dev

Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>


-------------------------------------------------

15.解决冲突

当两个分支上同一个文件被修改, 在提交时就会产生冲突, 文件内容中会有所体现
解决冲突后才能再次提交

查看是否有冲突发生
git status

用带参数的git log也可以看到分支的合并情况
git log --graph --pretty=oneline --abbrev-commit

-------------------------------------------------

16.分支管理策略

通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，
会丢掉分支信息。

如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分
支历史上就可以看出分支信息。

合并分支时使用--no-ff参数, 因为要创建一个新的commit, 所以用-m参数加上描述
git merge --no-ff -m "merge with no-ff" dev

合并后再用命令查看分支历史就可以看到分支信息了

合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来
曾经做过合并，而fast forward合并就看不出来曾经做过合并。

-------------------------------------------------

17.Bug分支

每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除

--当前在dev上开发未完成
  git status
--有Bug来袭并需要马上在master上修复
--那就在dev上保存现场
  git stash
--切到master创建一个bug分支
  git checkout master
  git checkout -b issue-101
--在bug分支上修复bug
  ...vi...
  git add readme.txt
  git commit -m "fix bug 101"
--将bug合并到master
  git checkout master
  git merge --no-ff -m "merged bug fix 101" issue-101
--继续回到dev干活
  git checkout dev
  git status
  git stash list
  git stash pop
  git stash apply stash@{0}

-------------------------------------------------

18.Feature分支

每添加一个新功能新建一个feature分支，在上面开发，完成，合并，最后删除该feature分支

--新feature来袭创建分支并开发(可能需要保存现场)
  git checkout -b feature-vulcan
  git add vulcan.py
  git status
  git commit -m "add feature vulcan"
--切回dev分支进行合并
  git checkout dev
  git merge --no-ff -m "merged feature vulcan" feature-vulcan"
--删除feature分支
  git branch -d feature-vulcan
--若新feature没有merge就要删除使用-D参数
  git branch -D feature-vulcan

-------------------------------------------------

19.多人协作

--查看远程库
git remote
git remote -v
显示可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址

--推送分支
git push origin master
git push origin dev

并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？
-master分支是主分支，因此要时刻与远程同步
-dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步
-bug分支只用于在本地修复bug，就没必要推到远程了，除非要记录修复几个bug
-feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发
总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你心情而定

--抓取分支
git clone git@github.com:yddgit/learngit.git
默认只能看到master分支
git branch
创建远程dev分支到本地
git checkout -b dev origin/dev
现在另一台设备也可工作了
git commit -m "add a file"
两台设备同时对一个文件作了修改, 后推送的设备会推送失败
此时需要从远端拉取最新版本合并到本地后再推送
git pull
拉取也失败则说明没有指定本地dev分支与远程origin/dev分支的链接
git branch --set-upstream dev origin/dev
git pull
合并后可能会有冲突, 手动解决后再次push即可

--多人协作的工作模式通常是这样：
首先，可以试图用git push origin branch-name推送自己的修改
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并
如果合并有冲突，则解决冲突，并在本地提交
没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功

-------------------------------------------------

20.标签管理

发布一个版本时，我们通常先在版本库中打一个标签，这样，就唯一确定了打标签时
刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史
版本取出来。所以，标签也是版本库的一个快照。

Git 的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像
对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成。

-------------------------------------------------

21.创建标签

对当前最新提交HEAD打标签
git tag v1.0
查看标签
git tag
查看历史commit id
git log --pretty=oneline --abbrev-commit
对历史commit打标签
git tag v0.9 06b4beb
查看标签信息
git show <tagname>
创建带有说明的标签，用-a指定标签名，-m指定说明文字
git tag -a v0.1 -m "version 0.1 released" fc52dce
使用-s参数用私钥签名一个标签(需要GnuPG配置Key)
git tag -s v0.2 -m "signed version 0.2 released" 39a6f70

-------------------------------------------------

22.操作标签

删除标签
git tag -d v0.1
推送标签到远程服务器
git push origin v1.0
一次性推送本地全部标签
git push origin --tags
删除远程标签先在本地删除再push
git tag -d v0.9
git push origin :refs/tags/v0.9

-------------------------------------------------

23.使用GitHub

如何参与一个开源项目呢？比如人气极高的bootstrap项目，这是一个非常强大的CSS
框架，你可以访问它的项目主页https://github.com/twbs/bootstrap，点“Fork”
就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：
git clone git@github.com:yddgit/bootstrap.git

一定要从自己的账号下clone仓库，这样你才能推送修改。如果从bootstrap的作者的仓
库地址git@github.com:twbs/bootstrap.git克隆，因为没有权限，你将不能推送修改。

如果你想修复bootstrap的一个bug，或者新增一个功能，立刻就可以开始干活，干完后，
往自己的仓库推送。

如果你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个
pull request。当然，对方是否接受你的pull request就不一定了。

-------------------------------------------------

24.自定义Git

让git显示颜色使用命令输出更醒目
git config --global color.ui true

-------------------------------------------------

25.忽略特殊文件

在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，
Git就会自动忽略这些文件。可以参考：https://github.com/github/gitignore

忽略文件的原则：
--忽略操作系统自动生成的文件，比如缩略图等；
--忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动
  生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
--忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。

举例：

# Windows:
Thumbs.db
ehthumbs.db
Desktop.ini

# My configurations:
db.ini
deploy_key_rsa

检验.gitignore的标准是git status命令是不是说“working directory clean”
.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！

-------------------------------------------------

26.配置别名

给常用命令添加别名，提高效率
git config --global alias.st status
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.br branch
git config --global alias.unstage 'reset HEAD'
git config --global alias.lg 'log --graph --pretty=oneline --abbrev-commit'
显示最近一次提交
git config --global alias.last 'log -1'

配置Git时加上--global是针对当前用户起作用的，否则，那只针对当前的仓库起作用
每个仓库的Git配置文件：.git/config
当前用户的Git配置文件在用户主目录下的一个隐藏文件：.gitconfig

-------------------------------------------------

27.搭建Git服务器

--安装Git
--创建Git用户
useradd -s /usr/bin/git-shell git
--添加客户端用户公钥id_rsa.pub到文件/home/git/.ssh/authorized_keys，一行一个
--初始化Git仓库/srv/sample.git
git init --bare sample.git
--修改目录权限
chown -R git:git sample.git
--禁用git用户shell登录，查看/etc/passwd中git用户的shell确认为/usr/bin/git-shell
--客户端clone远程仓库
git clone git@hostname:/srv/sample.git

管理公钥：Gitosis
管理权限：Gitolite

-------------------------------------------------

28.期末总结

GIt Cheat Sheet
http://www.git-tower.com/blog/assets/2013-05-22-git-cheat-sheet/cheat-sheet-large01.png

Git官网
http://git-scm.com

-------------------------------------------------
